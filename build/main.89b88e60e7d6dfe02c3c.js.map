{"version":3,"sources":["webpack:///./tasks/task1.js","webpack:///./tasks/task2.js","webpack:///./tasks/task3.js"],"names":["delay","time","Promise","resolve","setTimeout","logger","console","log","then","users","name","active","toggleUserState","allUsers","userName","map","user","updatedUsers","table","makeTransaction","transaction","reject","min","max","result","Math","floor","random","id","logSuccess","logError","warn","amount","catch"],"mappings":"2JAAMA,EAAQ,SAAAC,GACV,OAAO,IAAIC,SAAQ,SAAAC,GACfC,YAAW,WACPD,EAASF,KACVA,OAILI,EAAS,SAAAJ,GAAI,OAAIK,QAAQC,IAAR,kBAA8BN,EAA9B,OAGvBD,EAAM,KAAMQ,KAAKH,GACjBL,EAAM,KAAMQ,KAAKH,GACjBL,EAAM,MAAMQ,KAAKH,G,kCCbXI,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,SAACC,EAAUC,GAC/B,OAAO,IAAIZ,SAAQ,SAAAC,GAGfA,EAFiBU,EAASE,KAAI,SAAAC,GAAI,OAClCA,EAAKN,OAASI,EAAd,iBAA8BE,EAA9B,CAAoCL,QAASK,EAAKL,SAAWK,UAK/DX,EAAS,SAAAY,GAAY,OAAIX,QAAQY,MAAMD,IAG7CL,EAAgBH,EAAO,SAASD,KAAKH,GACrCO,EAAgBH,EAAO,OAAOD,KAAKH,GCnBnC,IAIMc,EAAkB,SAACC,GACrB,OAAO,IAAIlB,SAAQ,SAACC,EAASkB,GAC3B,IAN6BC,EAAKC,EAO9BC,EADExB,GANuBsB,EAMW,IANNC,EAMW,IAL1CE,KAAKC,MAAMD,KAAKE,UAAYJ,EAAMD,EAAM,GAAKA,IAO9ClB,YAAW,WACUqB,KAAKE,SAAW,IAEjCH,EAAS,CAACJ,EAAYQ,GAAI5B,GAE1BG,EAASqB,IAELH,EAAOD,EAAYQ,MAExB5B,OAIL6B,EAAa,SAAC,GAAe,IAAdD,EAAc,KAAV3B,EAAU,KACjCK,QAAQC,IAAR,eAA2BqB,EAA3B,iBAA8C3B,EAA9C,OAGI6B,EAAW,SAAAF,GACftB,QAAQyB,KAAR,gCAA6CH,EAA7C,8BAIFT,EAAgB,CAAES,GAAI,GAAII,OAAQ,MAC/BxB,KAAKqB,GACLI,MAAMH,GAETX,EAAgB,CAAES,GAAI,GAAII,OAAQ,MAC/BxB,KAAKqB,GACLI,MAAMH,GAETX,EAAgB,CAAES,GAAI,GAAII,OAAQ,KAC/BxB,KAAKqB,GACLI,MAAMH,GAETX,EAAgB,CAAES,GAAI,GAAII,OAAQ,MAC/BxB,KAAKqB,GACHI,MAAMH,K","file":"main.89b88e60e7d6dfe02c3c.js","sourcesContent":["const delay = time => {\r\n    return new Promise(resolve => {\r\n        setTimeout(() => {\r\n            resolve (time)\r\n        }, time)\r\n    });\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms","const users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n    return new Promise(resolve => {\r\n    const updatedUsers = allUsers.map(user =>\r\n        user.name === userName ? { ...user, active: !user.active } : user)\r\n        resolve (updatedUsers )\r\n    })\r\n};\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\n\r\ntoggleUserState(users, 'Mango').then(logger);\r\ntoggleUserState(users, 'Lux').then(logger);","const randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = (transaction) => {\r\n    return new Promise((resolve, reject) => {\r\n      const delay = randomIntegerFromInterval(200, 500);\r\n      let result;\r\n        setTimeout(() => {\r\n          const canProcess = Math.random() > 0.3;\r\n          if (canProcess) {\r\n            result = [transaction.id, delay]\r\n   \r\n            resolve (result);\r\n          } else {\r\n                reject(transaction.id);\r\n            };\r\n        }, delay);\r\n    });\r\n};\r\n\r\nconst logSuccess = ([id, time]) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\n\r\nmakeTransaction({ id: 70, amount: 150 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 71, amount: 230 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 72, amount: 75 })\r\n  .then(logSuccess)\r\n  .catch(logError);\r\n\r\nmakeTransaction({ id: 73, amount: 100 })\r\n  .then(logSuccess)\r\n    .catch(logError);\r\n  \r\n"],"sourceRoot":""}